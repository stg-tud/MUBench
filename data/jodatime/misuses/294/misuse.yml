api:
- java.io.ObjectOutputStream
- java.io.ByteArrayOutputStream
violations:
- missing/call
- redundant/call
crash: false
description: |
  When an ObjectOutputStream instance wraps an underlying ByteArrayOutputStream instance,
  it is recommended to flush or close the ObjectOutputStream before invoking the underlying instances's toByteArray().
  Although in these cases this is not strictly necessary because the
  writeObject method is invoked right before toByteArray, and writeObject
  internally calls flush/drain.  However, it is a good practice to call
  flush/close explicitly as mentioned for example [here](http://stackoverflow.com/questions/2984538/how-to-use-bytearrayoutputstream-and-dataoutputstream-simultaneously-java).
  This pull request flips the order of close and toByteArray methods.
fix:
  commit: https://github.com/emopers/joda-time/commit/0e82517a7f4a2e659143ce84ff1f4ea706e9a88c
  revision: 0e82517a7f4a2e659143ce84ff1f4ea706e9a88c
internal: false
location:
  file: org/joda/time/TestPeriod_Basics.java
  method: testSerialization()
report: https://github.com/JodaOrg/joda-time/pull/339
source:
  name: Owolabi's Dataset ASE'16
  url: fsl.cs.illinois.edu/spec-eval/
